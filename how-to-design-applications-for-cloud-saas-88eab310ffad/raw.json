[{
  "tag": "P",
  "text": "Originally published at Cloud Nine Apps.",
  "translation": "最初发布于Cloud Nine Apps。"
}, {
  "tag": "P",
  "text": "If you liked this post, you will find my AWS Advanced For Developers course helpful that focuses on many such best practices and techniques to design and deploy real-world applications in AWS.",
  "translation": "如果您喜欢这篇文章，您会发现我的AWS Advanced For Developers课程很有帮助，该课程侧重于在AWS中设计和部署实际应用程序的许多此类最佳实践和技术。"
}, {
  "tag": "H1",
  "text": "How To Design Applications For Cloud (SaaS)",
  "translation": "如何设计云应用程序（SaaS）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*8yHVUpvp3D_LDLeMQKiPJg.png?q=20",
  "type": "image",
  "file": "1!8yHVUpvp3D_LDLeMQKiPJg.png"
}, {
  "tag": "H1",
  "text": "How To Design Applications For Cloud (SaaS)",
  "translation": "如何设计云应用程序（SaaS）"
}, {
  "tag": "P",
  "text": "Software as a Service (SaaS) has been a predominant model for many software vendors. It helps similarly delivering software as a Cloud vendor delivers infrastructure services. SaaS applications are often deployed on a public cloud, like Amazon Cloud (AWS), Microsoft Azure, Google Cloud and so on. However, at times the organization may choose to use their datacenter (a.k.a. private cloud) to host the SaaS application and leverage their investment in the infrastructure. When you are designing SaaS applications, it takes more than just deploying application bits to the Cloud. Taking proper design considerations can not only help you in accomplishing a good design, but it can also help you in reducing costs and manage your deployment more effectively. In this post, I will cover some key considerations and tips to design SaaS applications that I have found useful over the years.",
  "translation": "软件即服务（SaaS）已成为许多软件供应商的主要模型。 与云供应商提供基础架构服务一样，它有助于类似地交付软件。 SaaS应用程序通常部署在公共云上，例如Amazon Cloud（AWS），Microsoft Azure，Google Cloud等。 但是，组织有时可能会选择使用其数据中心（也称为私有云）来托管SaaS应用程序并利用其在基础架构上的投资。 在设计SaaS应用程序时，不仅需要将应用程序比特部署到云中，还需要花费更多。 进行适当的设计考虑，不仅可以帮助您完成良好的设计，还可以帮助您降低成本并更有效地管理部署。 在这篇文章中，我将介绍一些多年来我发现有用的设计SaaS应用程序的关键注意事项和技巧。"
}, {
  "tag": "H2",
  "text": "How Is Designing Applications For Cloud Different From On-premise Applications Design?",
  "translation": "为云设计应用程序与本地应用程序设计有何不同？"
}, {
  "tag": "P",
  "text": "That’s a valid question that many Architects face, especially in the early phases. There are certain subtle differences. Let’s look at some of these just to get the perspective."
}, {
  "tag": "UL",
  "texts": ["Better Modularization: If you have a monolithic application with a huge footprint, it is perhaps wise to see if it can be broken into logical components that can be deployed separately. This not only improves modularity but helps you reduce the footprint of the application. Let’s say you have an application that uses background jobs to refresh data. You could segregate the core application and the background jobs as 2 (or more) components that can be deployed separately. This will reduce the footprint of the core application. So, you could potentially choose a smaller resource size. Also, depending on the needs, you can scale these two independently. So, if there is an increase in demand for background jobs, you can increase its capacity and likewise for the application tier. Since the resource size for each of these is small, scaling only the required tier/component will lead to an overall lower cost than more bulky resources for the monolith. Makes sense?", "Application is always up-to-date: This is a big shift for many on-premise applications. In the Cloud, customers typically expect the application to be always on the latest version. Now, if you think about it as an Architect it means you are not only able to update the application bits but also upgrade customer data with preferably no customer involvement. That is, it is completely transparent to them."],
  "translations": ["更好的模块化：如果您拥有一个庞大的单片应用程序，那么明智的做法是查看它是否可以分解为可以单独部署的逻辑组件。 这不仅可以提高模块化，还可以帮助您减少应用程序的占用空间。 假设您有一个使用后台作业刷新数据的应用程序。 您可以将核心应用程序和后台作业分离为2个（或更多）可以分别部署的组件。 这将减少核心应用程序的占用空间。 因此，您可能会选择较小的资源大小。 另外，根据需要，您可以独立地缩放这两个。 因此，如果对后台作业的需求增加，则可以增加其容量，并增加应用程序层的容量。 由于每个资源的资源量都很小，因此，仅扩展所需的层/组件将导致整体成本低于整体资源的整体成本。 说得通？", "应用程序始终是最新的：对于许多本地应用程序来说，这是一个很大的转变。 在云中，客户通常希望应用程序始终处于最新版本。 现在，如果您将其视为一名架构师，则意味着您不仅可以更新应用程序位，而且可以在不涉及客户的情况下升级客户数据。 也就是说，这对他们是完全透明的。"]
}, {
  "tag": "P",
  "text": "These are just some of the differences. But, you get the point.",
  "translation": "这些只是一些差异。 但是，您明白了。"
}, {
  "tag": "H2",
  "text": "Key Design Considerations for SaaS",
  "translation": "SaaS的关键设计注意事项"
}, {
  "tag": "P",
  "text": "When you are designing an application for Cloud, you want to consider the following key points."
}, {
  "tag": "UL",
  "texts": ["Choose appropriate Cloud services: Of course, you are deploying to Cloud. But, which services do you want to use? Are you simply going to use Infrastructure as a Service (IaaS)? Or are you going to take advantage of some Platform as a Service (PaaS) capabilities as well? The answer may not be always straightforward. So, here are some guidelines.", "Are you going to have the same application deployed to multiple Cloud platforms or on-premise as well? In that case, it may make sense to not have (or minimize) Cloud vendor-specific services and stick to more of IaaS services.", "Cost should be an important consideration in choosing the services. For example, certain PaaS services that are Cloud vendor managed may be managed by your team itself to reduce cost. While this may not make sense for every service, it is worth exploring.", "Keep your team expertise in mind. What would it take to use a certain Cloud service? And, if the team were to also maintain the underlying infrastructure, what skills would be needed?", "Design for failure: Designing fault-tolerant and highly available applications is fundamental to Cloud. Assume that your application will run into issues and how you will ensure that it continues to serve the users. These could be application failures or underlying infrastructure failures. There are a few useful capabilities offered by Cloud vendors to help here.", "Use a Load Balancer: You can put the application nodes behind a Load Balancer for both load-balancing purposes as well as to make sure that even if one or more nodes go down, the application is served via the other nodes.", "Geographically distributed application: Several Cloud vendors offer capabilities to spread the application across multiple geographical areas so that even if one area is impacted (say, due to a natural disaster), the application can be served from the other areas. For example, AWS supports deploying an application across multiple Availability Zones.", "Modularize your application: As we discussed in the earlier section, segregating components that can be deployed and managed separately can help reduce the footprint of the application and thus reduce the cost of the infrastructure. You may also consider making some of these components as microservices. The microservice approach can be particularly useful if there are other potential consumers besides your application. Now, that does not mean, you go overboard and create unnecessary components. Hence, one way to do this is to make components that can be deployed separately (such as core application versus background jobs).", "Security: Security involves many aspects — from securing your infrastructure to application. Some of the key aspects include ensuring that only the required ports are opened, using as minimal privileges on the resources as possible, having proper role-based access control, use of encryption, and so on. Security should not be looked at as a one-time deal. It is an on-going process that should improve and evolve over time.", "Multi-tenancy: A key benefit of running in the Cloud is being able to serve multiple customers using the same instance of the application. This brings out some obvious challenges in the application design to ensure that each customer’s data is segregated for both security and regulatory purposes. Some teams choose to go with a different persistent storage instance per customer, such as a separate database per customer. And, some choose to segregate data using row-level identifiers. Regardless of which approach you take, it is important to ensure that the architecture meets the scalability and security needs. For example, if you choose to go with a database per customer, you can host multiple databases on one RDS instance. And, when you run out of capacity, you can stand up another RDS instance.", "Zero/Minimal Downtime and Seamless Upgrades: Believe it or not, many customers expect that SaaS applications will have zero or very minimal downtime and since these are often managed by the same company who built the application, it should be upgraded seamlessly. The challenge is your application may not have been designed to handle upgrades smoothly, especially if it is a pre-existing application being converted to a SaaS application. There are 2 key aspects to consider a) deploying application bits and files b) handling persistent store upgrades. For rolling out application bits strategies like Blue/Green deployment can be used in which the new release is deployed to a new stack, tested and made live if the rollout was successful. The older stack resources can be decommissioned and reclaimed at a later point. One approach to achieve seamless upgrades is to make the underlying data model n — 1 compatible. What that means is if the release being deployed is of data model version n, it’s data model is backward compatible with the previous data model version (n — 1) thus ensuring that the upgrade will not break it. How can you ensure that? This requires incorporating discipline throughout your development cycle and following certain guidelines, like not deleting any columns, providing necessary upgrade scripts to handle any data migration needs, and so on. And, in the event upgrade is not successful, having support to rollback the upgrade. Now, you can understand this is not only technically challenging as this involves data migration and rollback, but it could also lead to a significantly slower rollout. Hence, you have to evaluate carefully what is reasonable for your application needs and implement the solution accordingly.", "Optimal Cost: As you progress through your application and deployment design, you would be able to come up with multiple approaches to deploy the same application. However, one key aspect to be successful in SaaS is to ensure that you choose the most cost-effective model that not only meets your immediate needs but can cater to at least the near future needs, such as when the demand rises or slows down. You do not want to be spending overtly, but not so less that the application starts choking with very few users. Hence, it is important to strike the right balance. A rule of thumb that I like to follow is when choosing resource sizing always go on the conservative side. And, if the testing reveals higher configuration is needed, then only increase."],
  "translations": ["选择适当的云服务：当然，您正在部署到云。 但是，您想使用哪些服务？ 您是否只是要使用基础架构即服务（IaaS）？ 还是要利用某些平台即服务（PaaS）功能？ 答案可能并不总是直截了当的。 因此，这里有一些准则。", "您是否要将同一应用程序部署到多个云平台或内部部署？ 在这种情况下，可能没有（或最小化）特定于云供应商的服务并坚持使用更多的IaaS服务是有意义的。", "成本应该是选择服务时的重要考虑因素。 例如，某些由Cloud供应商管理的PaaS服务可以由您的团队自己管理，以降低成本。 尽管这对于每项服务可能都没有意义，但值得探讨。", "牢记您的团队专业知识。 使用某种云服务需要什么？ 而且，如果团队还维护基础架构，那么需要什么技能？", "针对故障的设计：设计容错和高可用性的应用程序是Cloud的基础。 假定您的应用程序会遇到问题，以及如何确保继续为用户提供服务。 这些可能是应用程序故障或基础架构故障。 云供应商提供了一些有用的功能来帮助您。", "使用负载平衡器：出于负载平衡的目的，您可以将应用程序节点放在负载平衡器的后面，并确保即使一个或多个节点出现故障，也可以通过其他节点为应用程序提供服务。", "地理分布的应用程序：多个Cloud供应商提供了将应用程序分布在多个地理区域的功能，这样，即使一个区域受到了影响（例如，由于自然灾害），也可以从其他区域提供应用程序。 例如，AWS支持跨多个可用区部署应用程序。", "模块化您的应用程序：如我们在上一节中讨论的，隔离可以分别部署和管理的组件可以帮助减少应用程序的占用空间，从而降低基础架构的成本。 您也可以考虑将其中一些组件作为微服务。 如果您的应用程序之外还有其他潜在使用者，则微服务方法可能特别有用。 现在，这并不意味着您会全力以赴，创建不必要的组件。 因此，一种方法是制作可以单独部署的组件（例如核心应用程序与后台作业）。", "安全性：安全性涉及很多方面-从保护基础结构到应用程序。 一些关键方面包括确保仅打开所需的端口，使用对资源的尽可能少的特权，进行适当的基于角色的访问控制，使用加密，等等。 安全性不应被视为一次性交易。 这是一个持续的过程，应该随着时间的推移而改进和发展。", "多租户：在云中运行的一个主要好处是能够使用同一应用程序实例为多个客户提供服务。 这给应用程序设计带来了一些明显的挑战，以确保每个客户的数据出于安全和监管目的而被隔离。 一些团队选择为每个客户使用不同的持久性存储实例，例如为每个客户使用单独的数据库。 而且，有些人选择使用行级标识符隔离数据。 无论采用哪种方法，重要的是确保体系结构满足可伸缩性和安全性需求。 例如，如果选择每个客户使用一个数据库，则可以在一个RDS实例上托管多个数据库。 而且，当容量用尽时，您可以建立另一个RDS实例。", "零/最小停机时间和无缝升级：信不信由你，许多客户期望SaaS应用程序的停机时间为零或非常小，并且由于这些停机时间通常由构建应用程序的同一公司管理，因此应进行无缝升​​级。面临的挑战是您的应用程序可能没有被设计为能够顺利处理升级，特别是如果它已被转换为SaaS应用程序而已。需要考虑两个关键方面：a）部署应用程序位和文件b）处理持久性存储升级。对于推出应用程序位策略，可以使用诸如Blue / Green部署之类的策略，其中，如果成功推出，则将新版本部署到新堆栈中，进行测试并启用。较旧的堆栈资源可以在以后退役并回收。实现无缝升级的一种方法是使基础数据模型n_1兼容。这意味着，如果要部署的发行版具有数据模型版本n，则该数据模型与先前的数据模型版本（n — 1）向后兼容，从而确保升级不会破坏它。您如何确保？这就要求在整个开发周期中遵守纪律，并遵循某些准则，例如不删除任何列，提供必要的升级脚本来处理任何数据迁移需求，等等。并且，如果升级未成功，则支持回滚升级。现在，您可以理解，这不仅在技术上具有挑战性，因为它涉及数据迁移和回滚，而且还可能导致部署速度大大降低。因此，您必须仔细评估适合您的应用程序需求的合理方案，并相应地实施解决方案。"]
}, {
  "tag": "H2",
  "text": "DevOps Considerations For SaaS",
  "translation": "SaaS的DevOps注意事项"
}, {
  "tag": "P",
  "text": "DevOps is so critical for SaaS that it is worth discussing it separately. The following are some key considerations.",
  "translation": "DevOps对SaaS至关重要，因此值得单独讨论。 以下是一些关键注意事项。"
}, {
  "tag": "UL",
  "texts": ["Continuous Delivery: The DevOps pipelines should be able to take the checked-in code, produce a build from it that then passes through various stages (QA, performance, final go/no go checks, production deploy) in an automated manner. This may involve having multiple pipelines (typically, per stage) and having an uber pipeline that pushes the build through each of these stages. Now, the pipelines may also take some time to develop, but it is a good idea to start defining the contracts for each pipeline so that the consumer pipelines do not need to worry about the details. Eventually, the goal should be to get completely hands-free or as close to it as possible.", "Use Version Control for everything including DevOps changes: For application code, it is generally well understood to use the master branch of the source control. However, it is equally important to do the same for any DevOps changes. For example, when you are rolling out infrastructure changes, these should also be checked into the source control, tested and then pushed to production.", "Agile Infrastructure: To be successful at SaaS, you want to make sure that your infrastructure is agile and can cope up with the changes in demand. As the demand goes up, it can scale appropriate tier and when the demand goes down release the non-required resources. This requires a certain level of experimentation and testing to get to the right balance. For example, you can use AWS auto-scaling capabilities to automatically scale up/down the infrastructure.", "Monitoring and Alerts: The stacks these days have multiple moving parts and troubleshooting could be a bit of a challenge. Hence, it is important to have the right monitoring and alerting mechanisms in place so that when things go wrong, you can troubleshoot the problem more quickly. It is a good idea to leverage from some of the core Cloud monitoring capabilities like centralized logging, alarms, and notifications on errors."],
  "translations": ["持续交付：DevOps管道应该能够获取签入的代码，并从中生成一个构建，然后以自动化的方式经历各个阶段（QA，性能，最终通过/不通过检查，生产部署）。 这可能涉及到拥有多个管道（通常是每个阶段），并拥有一个超级管道来推动构建通过这些阶段中的每个阶段。 现在，开发这些管道可能还需要一些时间，但是开始为每个管道定义合同是一个好主意，这样用户管道就不必担心细节了。 最终，目标应该是使双手完全免于打扰或尽可能地接近手。", "对所有版本（包括DevOps更改）使用版本控制：对于应用程序代码，通常最好使用源代码控制的master分支。 但是，对于任何DevOps更改执行相同的操作同样重要。 例如，在推出基础架构更改时，还应将这些更改检入源代码管理中，进行测试，然后将其推向生产环境。", "敏捷的基础架构：要在SaaS上取得成功，您需要确保您的基础架构是敏捷的并且可以应对需求的变化。 随着需求上升，它可以扩展适当的层，当需求下降时，释放不需要的资源。 这需要一定程度的实验和测试才能达到适当的平衡。 例如，您可以使用AWS自动扩展功能自动扩展/缩减基础架构。"]
}, {
  "tag": "H2",
  "text": "Other Considerations For SaaS",
  "translation": "SaaS的其他注意事项"
}, {
  "tag": "UL",
  "texts": ["Planning and Prioritization: Like any other successful project, SaaS projects also require planning and prioritization. While everyone wants to go for goals like “push every check in to production”, see what makes the most business sense and prioritize the important things first. Of course, having a stretch goal is not wrong. But, it is important to get the important things right first. For example, if you do not have a good unit testing and automation coverage and you are trying to push every code change to production, even if you accomplish it, the usefulness is questionable. It can backfire because things can start breaking too quickly in production and then the R&D team will be consumed in handling those.", "Monetization Model: SaaS also impacts the monetization model. While in on-premise you may be fine selling license for a certain amount, in SaaS you may have to rethink what is the most suitable model for your business. Do you want to use a subscription-based model, utilization-based model, a hybrid model, or something else altogether?"],
  "translations": ["计划和优先级：与其他任何成功的项目一样，SaaS项目也需要计划和优先级。 尽管每个人都希望实现“将每一个检查都投入生产”之类的目标，但要了解什么才是最有意义的事情，并首先将重要的事情放在优先位置。 当然，有一个延伸目标没错。 但是，重要的是首先正确处理重要的事情。 例如，如果您没有良好的单元测试和自动化范围，并且您试图将每个代码更改推向生产环境，即使您完成了更改，其实用性也值得怀疑。 之所以会适得其反，是因为生产中的事情可能会开始崩溃得太快，然后研发团队将被消耗掉。", "货币化模型：SaaS也影响货币化模型。 在内部部署中，您可能会被罚款一定数量的许可证，而在SaaS中，您可能不得不重新考虑什么是最适合您的业务的模型。 您是否要使用基于订阅的模型，基于利用率的模型，混合模型或其他所有模型？"]
}, {
  "tag": "P",
  "text": "Hopefully, you got a better insight into what it takes to design a Cloud-based or SaaS application. It is certainly an enriching experience to see your application that involves so many different aspects, go live in production. As I always say, “Cloud is a journey and not a destination”. So, keep learning and evolving.",
  "translation": "希望您对设计基于云或SaaS的应用程序有更好的了解。 看到涉及许多不同方面的应用程序投入生产，无疑是一种丰富的体验。 就像我经常说的那样，“云是一个旅程，而不是目的地”。 因此，请继续学习并不断发展。"
}, {
  "tag": "H1",
  "text": "Other Readings",
  "translation": "其他读物"
}, {
  "tag": "H2",
  "text": "AWS CloudFormation — An Architect’s Best Friend",
  "translation": "AWS CloudFormation-架构师的最好朋友"
}, {
  "tag": "H3",
  "text": "AWS CloudFormation — An Architect’s Best Friend",
  "translation": "AWS CloudFormation-架构师的最好朋友"
}, {
  "tag": "H2",
  "text": "Code Coverage Is Not Enough",
  "translation": "代码覆盖面不足"
}, {
  "tag": "H3",
  "text": "Code Coverage Is Not Enough",
  "translation": "代码覆盖面不足"
}, {
  "tag": "H2",
  "text": "Not Just Another AWS EC2 Tutorial",
  "translation": "不仅仅是另一个AWS EC2教程"
}, {
  "tag": "H3",
  "text": "Not Just Another AWS EC2 Tutorial",
  "translation": "不仅仅是另一个AWS EC2教程"
}, {
  "tag": "P",
  "text": "Happy designing! — Nitin",
  "translation": "设计愉快！ —尼丁"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Nitin Patil的文章《How To Design Applications For Cloud (SaaS)》，参考：https://medium.com/swlh/how-to-design-applications-for-cloud-saas-88eab310ffad)",
  "translation": "（本文翻译自Nitin Patil的文章，《如何设计云应用（SaaS）》，参考：https：//medium.com/swlh/how-to-design-applications-for-cloud-saas-88eab310ffad）"
}]