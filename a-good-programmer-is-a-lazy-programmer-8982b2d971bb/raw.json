[{
  "tag": "H2",
  "text": "Software Engineer Resume Builder and Examples | gitconnected",
  "translation": "软件工程师简历生成器和示例| gitconnected"
}, {
  "tag": "H3",
  "text": "Create a high-quality software engineering resume in less than 5 minutes for free. Sync your profile, and we handle the…",
  "translation": "免费创建不到5分钟的高质量软件工程简历。 同步您的个人资料，我们将处理..."
}, {
  "tag": "H1",
  "text": "A Good Programmer is a Lazy Programmer",
  "translation": "一个好的程序员就是一个懒惰的程序员"
}, {
  "tag": "H2",
  "text": "However, the reverse is usually not true…",
  "translation": "但是，通常情况并非如此……"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*g7vToxOAkz-rfjtpHwgApg.jpeg?q=20",
  "type": "image",
  "file": "1!g7vToxOAkz-rfjtpHwgApg.jpeg"
}, {
  "tag": "P",
  "text": "While it might not be something you want to lead with in a job interview, one basic philosophy that separates good programmers from the rest of the pack is that of laziness. A good programmer feels the same way about basic tasks such as looping through a recordset and performing simple logic based on the results with the same zeal as an elementary school student attacking their math homework, minus the full-fledged freak out but possibility not minus the grumbling acceptance of work to be done.",
  "translation": "尽管您可能不想在面试中带头去做，但懒惰是使优秀程序员与其他人区分开的一种基本哲学。 优秀的程序员对基本任务的感觉是相同的，例如遍历记录集并根据结果执行简单的逻辑，就像小学生攻击数学作业一样，有着同样的热情，但要减去成熟的怪胎，但可能要减去 抱怨要完成的工作。"
}, {
  "tag": "P",
  "text": "Let’s face it, coding is sometimes just an advanced form of data entry. It’s something to get through rather than sink our teeth into.",
  "translation": "面对现实吧，编码有时只是数据输入的一种高级形式。 这是要通过而不是让我们的牙齿陷入的东西。"
}, {
  "tag": "P",
  "text": "And often, it’s an opportunity.",
  "translation": "通常，这是一个机会。"
}, {
  "tag": "P",
  "text": "The art of being a good programmer through laziness is to always be on the lookout for patterns and ways to package them. The goal is to get through the mindbogglingly dull portions of the project as quickly as possible so we can focus more time and effort on the actual problem solving.",
  "translation": "通过懒惰成为一名优秀的程序员的艺术是总是在寻找模式和打包方式。 目的是尽快解决项目令人费解的沉闷部分，以便我们将更多的时间和精力集中在实际的问题解决上。"
}, {
  "tag": "P",
  "text": "To be fair, most programmers know this to a degree. After all, objects and functions are the fundamental building blocks of development and applications are just packaged building blocks being passed through over and over to produce results. But the good programmer takes these ideas to an extreme level.",
  "translation": "公平地说，大多数程序员在某种程度上都知道这一点。 毕竟，对象和功能是开发的基本构建块，而应用程序只是打包的构建块，不断地传递以产生结果。 但是优秀的程序员将这些想法带到了一个极致。"
}, {
  "tag": "P",
  "text": "At this point, I will stop and state what should hopefully be obvious: The reverse is not true. A lazy programmer is rarely good. You know the person I’m talking about. Maybe they like to execute that query and stare at the screen for three minutes while it runs rather than opening up a new tab and working on a different piece of code. Perhaps they don’t feel they need proper error handling because “code is supposed to work perfectly.” Or maybe they are fine taking the long way around because they are there to do exactly what is told to them and not deviate from the plan even if it contains obvious inefficiencies.",
  "translation": "在这一点上，我将停止并陈述希望显而易见的事情：反之则不成立。 懒惰的程序员很少好。 你知道我在说的人。 也许他们喜欢在运行查询时执行该查询并在屏幕上盯着屏幕三分钟，而不是打开一个新选项卡并处理另一段代码。 也许他们认为不需要适当的错误处理，因为“代码应该可以正常工作”。 或者，也许他们很好，可以走很长一段路，因为他们在那里可以按照告诉他们的方式做，并且即使计划存在明显的低效率，也不会偏离计划。"
}, {
  "tag": "P",
  "text": "A good programmer is lazy because they prefer working on portions of the project that are difficult rather than typing in code that basically writes itself.",
  "translation": "优秀的程序员是懒惰的，因为他们喜欢在项目中比较困难的部分上工作，而不是键入基本上是自己编写的代码。"
}, {
  "tag": "P",
  "text": "This isn’t a contest to get the least amount of work done. It isn’t about clocking out at 5, going home and totally forgetting about your work until 8 AM the next day. A good programmer is lazy because they prefer working on portions of the project that are difficult rather than typing in code that basically writes itself. In fact, the best — and often laziest — of programmers wake up in the middle of the night with an “Aha!” moment because they solved a particularly tough puzzle while they were asleep. Or they look across the dinner table at their significant other, having been coding in their head since food was on the table and suddenly realizing they have no idea what the conversation being conducted in their quasi-absence is all about.",
  "translation": "这不是完成最少工作的竞赛。 这不是要在5点钟出来，而要在第二天早上8点之前完全忘记工作。 优秀的程序员是懒惰的，因为他们喜欢在项目中比较困难的部分上工作，而不是键入基本上是自己编写的代码。 实际上，最优秀的（通常是最懒惰的）程序员在半夜醒来，喊着“啊哈！” 这是因为他们在入睡时解决了一个特别棘手的难题。 或者，他们看着餐桌旁的另一半，因为自从食物摆在桌子上以来就一直在脑海中编码，突然意识到他们根本不知道在准假中进行的谈话到底是什么。"
}, {
  "tag": "P",
  "text": "I’ve certainly never been one that enjoys typing in code just to type in code. Both big and small, I like to package it up. Both big and small? Heck, even when it is tiny. When I was developing my random dungeon generator for table top games like D&D and Pathfinder, I would often need to check a certain radius around a point on the map. It might be a trap that could spring from one square away or an event that could happen from two squares or an encounter that could spot the party from four squares away, no matter the distance, the SQL was virtually the same. So instead of typing in the same section of the where clause, I programmed a function that would accept the x/y coordinates and a radius in order to spit back the SQL.",
  "translation": "我当然从来都不是喜欢只键入代码的人。 无论大小，我都喜欢打包。 大大小小的？ 哎呀，即使很小。 在为诸如D＆D和Pathfinder之类的桌面游戏开发随机地牢生成器时，我经常需要检查地图上某个点周围的特定半径。 它可能是一个陷阱，可能从一个方格的地方冒出来，或者是一个事件可能从两个方格的地方发生，或者是一个可能从四个方格的地方发现聚会的遭遇，无论距离多远，SQL几乎都是相同的。 因此，我没有在where子句的同一部分中键入内容，而是编写了一个函数，该函数将接受x / y坐标和半径以吐回SQL。"
}, {
  "tag": "P",
  "text": "Simple. And yet it saved me from manually typing it dozens upon dozens of times AND, perhaps even more important, it ensured the where clause would be free of typos. That means no scrutinizing of code for half an hour only to find I’d typed a 3 instead of a 4.",
  "translation": "简单。 但是，它使我免于数十次手动键入操作，而且甚至更重要的是，它确保where子句不会出现错字。 这意味着半个小时都没有仔细检查代码，只是发现我键入的是3而不是4。"
}, {
  "tag": "P",
  "text": "I faced a similar pattern when looking up items in the treasure tables to fill a chest or monsters in encounter tables to create an ambush. The field names changed, but the basic algorithm was the same. There would be a record with a weight or frequency (how often it should be randomly pulled from the data set), conditions (such as the level of the creature or treasure, the type of encounter or item, etc.) and a primary key to identify it. The specifics might change, but how you randomly choose a record from this type of dataset stays the same, thus a function was born to do the heavy lifting.",
  "translation": "当在宝藏表中查找物品以填满箱子或在遭遇表中的怪物来制造伏击时，我遇到了类似的模式。 字段名称已更改，但基本算法相同。 将有一条记录，记录中包含权重或频率（应从数据集中随机提取的频率），条件（例如生物或宝藏的高度，遭遇或物品的类型等）和主键 识别它。 具体细节可能会发生变化，但是您如何从此类数据集中随机选择记录保持不变，因此诞生了一个繁重的功能。"
}, {
  "tag": "P",
  "text": "Sometimes the laziest way of doing something was to have code write code. I’ve never been the biggest fan of templates that ship with development platforms, but I’m a big fan of coding your own.",
  "translation": "有时做某事的最懒惰的方式是让代码编写代码。 我从来都不是开发平台附带的模板的最大支持者，但是我非常喜欢自己编写代码。"
}, {
  "tag": "P",
  "text": "When I started with my first ‘real’ programming job, we used Visual Basic to access a Microsoft SQL Server. (Yes, I’m a dinosaur. I even remember typing on green screen terminals to develop on a VAX/VMS mainframe back in college.) The normal way of creating a data entry form was to include a recordset object that linked to fields on the form, but the recordset object shipped by Microsoft wasn’t without its own bugs and performance issues, so we would do this part “manually.” And in this case, that meant writing out our own code for inserting, updating and deleting records.",
  "translation": "当我开始第一个“实际”编程工作时，我们使用Visual Basic访问Microsoft SQL Server。 （是的，我是恐龙。我什至还记得在大学时在绿屏终端上键入内容以在VAX / VMS大型机上进行开发。）创建数据输入表单的通常方法是包括一个链接到字段上的记录集对象 表单，但是Microsoft附带的记录集对象并非没有自身的错误和性能问题，因此我们将“手动”完成这一部分。 在这种情况下，这意味着写出我们自己的代码来插入，更新和删除记录。"
}, {
  "tag": "P",
  "text": "This resulted in large amounts of code looking up values in fields on the form to build the INSERT or UPDATE statement by hand. Tedious.",
  "translation": "这导致大量代码在表单上的字段中查找值，以手动构建INSERT或UPDATE语句。 乏味。"
}, {
  "tag": "P",
  "text": "While Microsoft’s recordset object wasn’t always reliable, it at least minimized the amount of code required to do these basic functions. So in order to mimic this benefit while avoiding the recordset object itself, I developed a class that would compare fields on a form to the fields in the database in order to automatically generate the SQL statements needed to perform these basic tasks. Obviously, this was a little more complex than I’ll go into here, but the result replicated the benefits of the recordset object (easier and smaller chunks of code) while subtracting the primary detractor (possibly buggy or inefficient code you had no control over).",
  "translation": "尽管Microsoft的记录集对象并不总是可靠的，但它至少使执行这些基本功能所需的代码量最少。 因此，为了在避免记录集对象本身的同时模仿此好处，我开发了一个类，该类将表单上的字段与数据库中的字段进行比较，以便自动生成执行这些基本任务所需的SQL语句。 显然，这比我在这里要讲的要复杂一点，但是结果复制了记录集对象的好处（更轻松，更小的代码块），同时减去了主要的干扰因素（可能是错误或效率低下的代码，您无法控制） ）。"
}, {
  "tag": "P",
  "text": "When I moved to working in PHP with MySQL, I ran up against the same type of issue. Big table = lots of code = boring. The big difference here was that less technical people would be working within the same files doing the HTML side of things, so I wanted to ensure some simplicity. And sometimes those big chunks of code are actually easier for the less technical to deal with than a more complicated system of getting the same thing done. Solution: build code that could be run to automatically generate the basic PHP code needed to insert, update and delete records in the database. Basically, building your own template.",
  "translation": "当我转向使用MySQL与PHP一起工作时，遇到了相同类型的问题。 大表=许多代码=无聊。 此处最大的区别是，技术人员较少，他们会在同一文件中处理HTML事务，因此我想确保一些简单性。 有时候，那些大块的代码实际上对技术水平较低的人来说比对完成相同事情的更复杂的系统更容易处理。 解决方案：生成可运行以自动生成在数据库中插入，更新和删除记录所需的基本PHP代码的代码。 基本上，构建自己的模板。"
}, {
  "tag": "P",
  "text": "These examples aren’t meant to dazzle so much as demonstrate that looking for patterns is something programmers should do no matter the size of the code. Even something as simple as creating an SQL where clause to bring in records within a certain distance can have a positive effect on how much time it takes you to finish a project. I even have functions that will give me the count, min or max from a table given a certain where clause. And the mere fact that it takes the typo out of the equation can make these functions worthwhile in the long run.",
  "translation": "这些示例并没有使用户眼花azz乱，而是表明无论代码的大小如何，程序员都应该寻找模式。 即使创建SQL SQL where子句以在一定距离内引入记录之类的简单操作，也可以对完成项目所需的时间产生积极影响。 我什至拥有给定where子句的函数，可以给我一个表的最小值或最大值。 从长远来看，将错字排除在外的事实可以使这些功能值得。"
}, {
  "tag": "P",
  "text": "Most of us with a few years under our belt have worked beside the programmer quite happy to type in line after line of thoughtless code day after day feeling no sense of urgency to search for the most efficient route. And I’m not saying these are bad programmers, but if you are taking the most time to do every piece of your project, you are far more likely to get behind when that surprise puzzle pops up. And there is almost always a surprise.",
  "translation": "我们大多数人在程序员的陪伴下工作了几年，很高兴能日以继夜地逐行输入无意识的代码，因此没有紧迫感寻找最有效的途径。 我并不是说这些都是不好的程序员，但是，如果您花费最多的时间来完成项目的每个部分，那么当出现令人惊讶的难题时，您更有可能落伍。 而且几乎总是有一个惊喜。"
}, {
  "tag": "P",
  "text": "This is where looking for the patterns within the coding pays the biggest dividends. The time saved not typing in code that requires little thought can be put towards feature everyone thought was going to take a short amount of time but the reality was much longer.",
  "translation": "在这里寻找编码中的模式会带来最大的收益。 无需键入代码即可节省时间，无需花太多时间就可以实现每个人都想花很短时间才能实现的功能，但实际情况要长得多。"
}, {
  "tag": "P",
  "text": "The basic mentality for a lazy programmer? Always look for a pattern.",
  "translation": "懒惰的程序员的基本心态？ 始终寻找一种模式。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Daniel Nations的文章《A Good Programmer is a Lazy Programmer》，参考：https://levelup.gitconnected.com/a-good-programmer-is-a-lazy-programmer-8982b2d971bb)",
  "translation": "（本文翻译自《 Daniel Nations》的文章《一个好的程序员就是一个懒惰的程序员》，参考：https：//levelup.gitconnected.com/a-good-programmer-is-a-lazy-programmer-8982b2d971bb）"
}]