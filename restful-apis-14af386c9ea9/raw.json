[{
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*XOE3qABqFaTlH-LoBuQsww.png?q=20",
  "type": "image",
  "file": "1!XOE3qABqFaTlH-LoBuQsww.png"
}, {
  "tag": "H1",
  "text": "RESTFul APIs!",
  "translation": "RESTFul API！"
}, {
  "tag": "P",
  "text": "REST is an architectural style, or design pattern, for APIs.",
  "translation": "REST是API的体系结构样式或设计模式。"
}, {
  "tag": "P",
  "text": "The Representational State Transfer (REST) architectural style is an API worldview that elevates information from systems into a first-class element of architectures. REST allows to achieve the architectural properties of performance, scalability, generality, simplicity, modifiability, and extensibility.",
  "translation": "代表性状态转移（REST）架构样式是一种API世界观，可将系统中的信息提升为架构的一流元素。 REST允许实现性能，可伸缩性，通用性，简单性，可修改性和可扩展性的体系结构属性。"
}, {
  "tag": "P",
  "text": "Who invented REST?",
  "translation": "谁发明了REST？"
}, {
  "tag": "P",
  "text": "REST was defined by Roy Fielding, a computer scientist. He presented the REST principles in his PhD dissertation in 2000. The ideas and terms described as “RESTful” systems were introduced and collated in Dr. Roy Fielding’s thesis, “Architectural Styles and the Design of Network- based Software Architectures”.",
  "translation": "REST由计算机科学家Roy Fielding定义。 他在2000年的博士学位论文中提出了REST原理。被描述为“ RESTful”系统的思想和术语在Roy Fielding博士的论文《建筑风格与基于网络的软件体系结构设计》中得到了介绍和整理。"
}, {
  "tag": "H1",
  "text": "REST stands for REpresentational State Transfer.",
  "translation": "REST代表代表性状态转移。"
}, {
  "tag": "P",
  "text": "It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource.",
  "translation": "这意味着当调用RESTful API时，服务器将向客户端传输所请求资源状态的表示。"
}, {
  "tag": "P",
  "text": "For example, when a developer calls Instagram API to fetch a specific user (the resource), the API will return the state of that user, including their name, the number of posts that user posted on Instagram so far, how many followers they have, and more.",
  "translation": "例如，当开发人员调用Instagram API来获取特定用户（资源）时，API将返回该用户的状态，包括他们的姓名，该用户到目前为止在Instagram上发布的帖子数量，他们有多少关注者 ， 和更多。"
}, {
  "tag": "P",
  "text": "Before we dive into what makes a RESTful API and what other constraints and rules you should follow if you want to create RESTful APIs, let me explain few key terms:",
  "translation": "在我们深入探讨构成RESTful API的因素以及想要创建RESTful API时应遵循的其他限制和规则之前，让我解释一些关键术语："
}, {
  "tag": "P",
  "text": "1. Client — the client is the client software (web, mobile, system, bot etc.) who uses the API. You can be a developer to use twitter API to read and write data from social media feeds, create new tweets, newsfeeds and do more actions in a software program. The software program will call twitter’s API. The client can call this program via web browser, mobile or thru any interface and uses the returned data to render information on the screen.",
  "translation": "1.客户端-客户端是使用API的客户端软件（网络，移动，系统，机器人等）。 您可以成为开发人员，使用Twitter API从社交媒体源中读取和写入数据，创建新的推文，新闻源以及在软件程序中执行更多操作。 该软件程序将调用twitter的API。 客户端可以通过Web浏览器，移动设备或任何界面调用此程序，并使用返回的数据在屏幕上呈现信息。"
}, {
  "tag": "P",
  "text": "2. Resource — a resource can be an object that API can provide information about. In Instagram’s API, for example, a resource can be a user, a photo, or a hashtag. Each resource has a unique identifier. The identifier can be a name or a number.",
  "translation": "2.资源-资源可以是API可以提供有关信息的对象。 例如，在Instagram的API中，资源可以是用户，照片或主题标签。 每个资源都有一个唯一的标识符。 标识符可以是名称或数字。"
}, {
  "tag": "P",
  "text": "3. An API is an application programming interface. It is a set of rules that allow programs to talk to each other. The developer creates the API on the server and allows the client to talk to it.",
  "translation": "3. API是应用程序编程接口。 这是一组允许程序相互通信的规则。 开发人员在服务器上创建API，并允许客户端与之对话。"
}, {
  "tag": "P",
  "text": "4. REST determines how the API looks like. It stands for “Representational State Transfer”. It is a set of rules that developers follow when they create their API. One of these rules states that you should be able to get a piece of data (called a resource) when you link to a specific URL. Each URL is called a request while the data sent back to you is called a response.",
  "translation": "4. REST确定API的外观。 它代表“代表性国家转移”。 这是开发人员创建API时要遵循的一组规则。 这些规则之一规定，当您链接到特定的URL时，您应该能够获得一条数据（称为资源）。 每个URL称为请求，而发送回给您的数据称为响应。"
}, {
  "tag": "P",
  "text": "5. The representation of the state can be in a JSON format, and probably for most APIs this is indeed the case. It can also be in XML or HTML format. What the server does when you, the client, call one of its APIs depends on 2 things that you need to provide to the server:",
  "translation": "5.状态的表示形式可以是JSON格式，可能对于大多数API而言确实如此。 它也可以是XML或HTML格式。 当您（客户端）调用其API之一时，服务器的工作取决于您需要提供给服务器的两件事："
}, {
  "tag": "P",
  "text": "1. An identifier for the resource you are interested in. This is the URL for the resource, also known as the endpoint. In fact, URL stands for Uniform Resource Locator.",
  "translation": "1.您感兴趣的资源的标识符。这是资源的URL，也称为端点。 实际上，URL代表统一资源定位符。"
}, {
  "tag": "P",
  "text": "2. The operation you want the server to perform on that resource, in the form of an HTTP method, or verb. The common HTTP methods are GET, POST, PUT, and DELETE.",
  "translation": "2.您希望服务器以HTTP方法或动词的形式在该资源上执行的操作。 常见的HTTP方法是GET，POST，PUT和DELETE。"
}, {
  "tag": "P",
  "text": "A RESTful API exposes information about itself in the form of information about its resources. It also enables the client to take actions on those resources, such as create new resources (i.e. create a new user) or change existing resources (i.e. edit a post).",
  "translation": "RESTful API以有关其资源的信息形式公开有关其自身的信息。 它还使客户能够对那些资源采取行动，例如创建新资源（即创建新用户）或更改现有资源（即编辑帖子）。"
}, {
  "tag": "P",
  "text": "The design rationale behind the Web architecture can be described by an architectural style consisting of the set of constraints applied to elements within the architecture. By examining the impact of each constraint as it is added to the evolving style, we can identify the properties induced by the Web’s constraints.",
  "translation": "Web架构背后的设计原理可以通过一种架构样式来描述，该架构样式由应用于架构中元素的一组约束组成。 通过检查将每个约束添加到不断发展的样式中的影响，我们可以确定由Web约束引起的属性。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Vikas Shivpuriya的文章《RESTFul APIs!》，参考：https://medium.com/@vikas.ny30/restful-apis-14af386c9ea9)",
  "translation": "（本文翻译自Vikas Shivpuriya的文章，《 RESTFul API！》，参考：https：//medium.com/@vikas.ny30/restful-apis-14af386c9ea9）"
}]