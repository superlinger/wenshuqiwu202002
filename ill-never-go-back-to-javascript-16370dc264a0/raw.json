[{
  "tag": "H2",
  "text": "Software Engineer Resume Builder and Examples | gitconnected",
  "translation": "软件工程师简历生成器和示例| gitconnected"
}, {
  "tag": "H3",
  "text": "Create a high-quality software engineering resume in less than 5 minutes for free. Sync your profile, and we handle the…",
  "translation": "免费创建不到5分钟的高质量软件工程简历。 同步您的个人资料，我们将处理..."
}, {
  "tag": "H1",
  "text": "I’ll Never Go Back to JavaScript",
  "translation": "我永远不会回到JavaScript"
}, {
  "tag": "H2",
  "text": "But I Love the Legacy Left in its Wake",
  "translation": "但是我喜欢遗留的遗产"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*UZTUn1FWaVqWD-MyD_Cqjw.jpeg?q=20",
  "type": "image",
  "file": "1!UZTUn1FWaVqWD-MyD_Cqjw.jpeg"
}, {
  "tag": "P",
  "text": "JavaScript may be the defacto language of the modern web, but it has long been my language of choice for scripting, too. Python is fun to code in, but if I have something to automate, I reach for node. My server side language of choice used to be C#, but nowadays it feels clumsy, albeit powerful. Node, which I once naïvely described as a “flash in the pan”, meets the needs of everything I write. I can even write Android and iOS apps in JavaScript in a number of different ways.",
  "translation": "JavaScript可能是现代网络的事实上的语言，但长期以来，它也是我选择脚本编写的语言。 使用Python进行编码很有趣，但是如果我有一些自动化的东西，我会去寻找节点。 我选择的服务器端语言曾经是C＃，但如今它虽然功能强大，但感觉却很笨拙。 我曾经天真的将Node描述为“泛滥成灾”，它满足了我编写的所有内容的需求。 我什至可以用多种不同的方式用JavaScript编写Android和iOS应用程序。"
}, {
  "tag": "P",
  "text": "That isn’t to say that it is the perfect tool for everything, but it’s served me well over the years. I’ve stoically acknowledged the flaws levelled at the web’s front of house workhorse, including Gary Bernhardt’s tongue-in-cheek “Wat?” lightning talk that still has me chuckling just thinking about it. If you’ve never seen it before, stop reading now and go watch it. You can thank me later.",
  "translation": "并不是说它是适用于一切的完美工具，但是多年来我一直为我服务。 我一直在讽刺地承认在家庭主力马网上出现的缺陷，包括加里·伯恩哈特（Gary Bernhardt）嘲讽的“ Wat？”。 闪电般的谈话让我仍在思考。 如果您以前从未看过它，请立即停止阅读并继续观看。 您可以稍后感谢我。"
}, {
  "tag": "P",
  "text": "That lightning talk has been part of the recommended reading list (viewing list? consuming list?) that I give to would-be front end developers, alongside Jonathan Creamer’s “JavaScript Architecture for the 23rd Century”. While some of the content in the above article seems redundant since the advent of ES6, it goes a long way to explaining the things about JavaScript that require a mindset shift from “normal” programming languages (if there is such a thing). That article alone is a large part of the reason that I began my own JavaScript Odyssey 5 years ago.",
  "translation": "闪电般的谈话已成为我推荐给前端开发人员的推荐阅读清单（查看清单还是消耗清单？）的一部分，还有乔纳森·克里默的“ 23世纪JavaScript架构”。 尽管自ES6问世以来，上一篇文章中的某些内容似乎是多余的，但是它对于解释JavaScript所需的思路还有很长的路要走，这需要从“常规”编程语言（如果有的话）转变思维方式。 仅那篇文章是我5年前开始自己的JavaScript Odyssey的大部分原因。"
}, {
  "tag": "P",
  "text": "So why am I now threatening to leave and never return? The answer is simple. Typescript.",
  "translation": "那么，为什么我现在扬言要离开，再也不回来了？ 答案很简单。 打字稿。"
}, {
  "tag": "H1",
  "text": "What is Typescript?",
  "translation": "什么是打字稿？"
}, {
  "tag": "P",
  "text": "I assume you’ve heard of Typescript, but if not, let me try and summarize: Typescript is strongly typed Javascript. It adds the features you would expect of a strongly typed language, and requires a compilation step (technically it’s “transpilation”) to turn the Typescript into JavaScript. This is because browsers do not understand Typescript. Technically speaking, Typescript does not add any new runtime features — it instead adds features for the developer.",
  "translation": "我假设您听说过Typescript，但如果没有，请尝试总结一下：Typescript是强类型的Javascript。 它添加了您期望强类型语言的功能，并且需要一个编译步骤（从技术上来说是“翻译”）才能将Typescript转换为JavaScript。 这是因为浏览器不了解Typescript。 从技术上讲，Typescript不会添加任何新的运行时功能，而是为开发人员添加功能。"
}, {
  "tag": "P",
  "text": "I’ve heard some people describe Typescript as a love it or hate it language, but I’ve yet to speak to anyone who has tried it and hated it. I’ve spoken to plenty of people who were hesitant to try it — in about mid 2016 I was one of those people. But the worst criticism I’ve heard levelled at Typescript by my peers is that it’s an extra set of tools to learn. Not just the language, but the build process, too. However most modern web apps have at least one link in their build chain reserved for JavaScript in the form of Babel — the tool that allows newer JavaScript to run on older browsers. Adding TypeScript into that pipeline shouldn’t be rocket science, especially since Babel has supported Typescript compilation since v7.",
  "translation": "我听说有人形容打字稿是喜欢它还是讨厌它，但是我还没有和任何尝试过并讨厌它的人交谈。 我已经与许多犹豫不决的人进行了交谈-大约在2016年中，我就是其中之一。 但是，我听到的同行对Typescript的最严厉批评是，这是一种额外的学习工具。 不仅是语言，而且还有构建过程。 但是，大多数现代的Web应用程序在其构建链中至少有一个链接以Babel的形式保留给JavaScript，Babel是一种允许较新的JavaScript在较旧的浏览器上运行的工具。 将TypeScript添加到该管道中不应该是火箭科学，尤其是因为Babel自v7起就支持Typescript编译。"
}, {
  "tag": "P",
  "text": "It shouldn’t be rocket science, but it sometimes feels that way, which is one of the reasons that newcomers to Typescript sometimes flounder and run back to the welcoming arms of JavaScript, which runs right there in the browser.",
  "translation": "它不应该是火箭科学，但有时会有这种感觉，这就是Typescript新手有时会挣扎并回到浏览器中运行的JavaScript受欢迎的原因之一。"
}, {
  "tag": "H1",
  "text": "The Benefits",
  "translation": "好处"
}, {
  "tag": "P",
  "text": "But as I said, I’ve never heard anyone who adopted Typescript and regretted it. The benefits far outweigh the difficulties, especially in an age of the Angular CLI or Create React App — both of which allow you to get started with a new Typescript enabled project in minutes.",
  "translation": "但是正如我所说，我从未听过有人采用Typescript并为此感到后悔。 好处远胜于困难，尤其是在使用Angular CLI或Create React App的时代-两者都使您可以在几分钟之内开始使用启用了Typescript的新项目。"
}, {
  "tag": "P",
  "text": "I assume you know what those benefits are, but in case you don’t, allow me to summarise:",
  "translation": "我假设您知道这些好处是什么，但是如果您不知道，请允许我总结一下："
}, {
  "tag": "UL",
  "texts": ["Typescript’s compilation step means you can catch problems early instead of waiting for runtime failures.", "Your IDE can now prompt you even earlier that the compilation step. Imagine your IDE telling you when you refer to a variable that doesn’t exist or you call a function with the wrong arguments! Truly revolutionary! (I’m being facetious, of course, since “real” programming languages have enjoyed this for years) Edit: I can’t emphasize this one enough. I recently converted an old project from JavaScript to Typescript as a way to learn the intricacies of the codebase, which I had inherited from someone else. It was a gradual process, during which the team continued to deliver new features, but we came across several examples of code where we were using 3rd party libraries incorrectly. Maybe the API had changed or someone had misread the documentation, but we were passing certain config variables that did absolutely nothing. Typescript told us right away, and we removed the offending code. It clearly wasn’t needed, and was very misleading.", "When new features are proposed in ECMAScript (the standard that drives JavaScript), TypeScript is able to adopt them early, allowing you to stay on the cutting edge."],
  "translations": ["Typescript的编译步骤意味着您可以及早发现问题，而不必等待运行时失败。", "您的IDE现在可以在编译步骤更早的时候提示您。 想象一下，当您引用一个不存在的变量或使用错误的参数调用函数时，您的IDE会告诉您！ 真正的革命！ （当然，因为“真正的”编程语言已经享受了多年，所以我一直在调侃。）编辑：我对此强调不够。 我最近将一个旧项目从JavaScript转换为Typescript，以了解我从别人那里继承来的代码库的复杂性。 这是一个循序渐进的过程，在此期间，团队继续提供新功能，但是我们遇到了一些示例代码，这些示例中我们错误地使用了第三方库。 也许API发生了更改，或者有人误读了文档，但是我们传递了某些配置变量，这些变量绝对没有任何作用。 Typescript立即告诉我们，我们删除了有问题的代码。 显然，它是不需要的，并且非常容易误导。", "当ECMAScript（驱动JavaScript的标准）中提出新功能时，TypeScript可以尽早采用它们，从而使您始终处于最前沿。"]
}, {
  "tag": "P",
  "text": "But really, the main benefit is that Typescript makes your code self describing in a way that JavaScript can’t. When I’m the lone developer on a project, JavaScript isn’t so bad because I can keep everything in my head and I have a perfect memory, right? Wrong. Even as a sole developer I am prone to bouts of amnesia when it comes to code I’ve written. Nowadays, when I write plain JavaScript, I hate having to go and read a function definition to figure out how to use it. I don’t know what it returns (if anything) or what kind of arguments it accepts. I might know the number of arguments and their names, but that’s not always enough:",
  "translation": "但实际上，主要好处是Typescript使您的代码能够以JavaScript无法做到的方式进行自我描述。 当我是项目的唯一开发人员时，JavaScript并不是很糟糕，因为我可以将所有事情都牢记在心，并且我拥有完美的记忆，对吗？ 错误。 即使是唯一的开发人员，我编写的代码也容易失忆。 如今，当我编写普通的JavaScript时，我讨厌不得不去阅读函数定义以弄清楚如何使用它。 我不知道它返回什么（如果有的话）或它接受什么样的参数。 我可能知道参数的数量及其名称，但这并不总是足够的："
}, {
  "tag": "FIGURE",
  "type": "code",
  "raw": "https://gist.github.com/Maloric/8fe85512dd64d4e3e2451d5ad24e8564/raw/faa48d35663d8847194468b7d4cbfff4b706fd9d/doTheThing.js",
  "code": "function doTheThing() {\n  let error = false;\n  \n  // About a million lines of code that might cause an error\n  \n  return error;\n}\n\nfunction consumeTheThing() {\n  let error = doTheThing();\n  if (error) {\n    // What do I do with the error now?\n  }\n}"
}, {
  "tag": "P",
  "text": "This is what I mean. Is “error” a boolean? It sure looks that way when I see line 2, but what about the million lines of code between that and the end of “doTheThing”? It could be a string, an object, or who knows what.",
  "translation": "这就是我的意思。 “错误”是布尔值吗？ 当我看到第2行时，它看起来肯定是这样，但是那到“ doTheThing”末尾之间的一百万行代码又如何呢？ 它可以是字符串，对象或知道什么的人。"
}, {
  "tag": "P",
  "text": "You might argue that this flexibility is an asset. It can be, but more often it’s a trap, luring you into easy ways that will cause many micro-frustrations among you and your peers. Ever been in the middle of someone else’s code and felt like you were in a labyrinth? That’s what your code looks like to someone else. You can write “good” code in JavaScript, but very little about the language encourages you to do so.",
  "translation": "您可能会说这种灵活性是一种资产。 可能是这样，但更常见的是它是一个陷阱，诱使您采用简单的方式，这会在您和您的同伴之间引起许多微小的挫败感。 曾经在别人的代码中间，觉得自己在迷宫中吗？ 那就是别人的代码。 您可以用JavaScript编写“好的”代码，但是很少有人鼓励您这样做。"
}, {
  "tag": "P",
  "text": "And that’s the beauty of TypeScript. It doesn’t force you to be a good developer. But it gives you the tools to do so.",
  "translation": "这就是TypeScript的美。 这并不会迫使您成为一名优秀的开发人员。 但这为您提供了实现此目标的工具。"
}, {
  "tag": "H1",
  "text": "The Drawbacks",
  "translation": "缺点"
}, {
  "tag": "P",
  "text": "Are there drawbacks? Of course there are.",
  "translation": "有缺点吗？ 当然有。"
}, {
  "tag": "UL",
  "texts": ["More typing, in both senses of the word. You’ll wear your keyboard out faster (which may be a concern for those of you with butterfly keyboards). It’s not such a big deal, but some JavaScript developers hate having to write out types with every new function or variable. You don’t have to do that, but if you’re not using types, why are you using Typescript?", "Since you have to compile your code, every update and every test run will take just a little bit longer. But we’re talking seconds. The amount of time I save by using Typescript far outweighs the time I spend compiling it.", "The complexity of building the project can be a real pain at times. This one is real — if you’re not familiar with your build tools, setting up a new project can be a frustrating experience. My advice in the short term is to find a starter project to get you going — the aforementioned Angular CLI and Create React App are great in this respect, if you happen to be considering those frameworks. Long term? Invest time in learning the tools — tsc, Babel, WebPack and all that good stuff. If you’re using node, try ts-node. If you’re using Mocha, try ts-mocha. There are some easy shortcuts like this to get you started."],
  "translations": ["从字义上来说，更多的打字。 您可以更快地穿破键盘（对于使用蝶形键盘的人来说，这可能是个问题）。 没什么大不了的，但是一些JavaScript开发人员讨厌必须用每个新函数或变量写出类型。 您不必这样做，但是如果您不使用类型，为什么要使用Typescript？", "由于您必须编译代码，因此每次更新和每次测试运行都将花费一点时间。 但是，我们正在谈论几秒钟。 我使用Typescript节省的时间远远超过了编译它所花费的时间。", "有时，构建项目的复杂性可能是一个真正的痛苦。 这是真实的-如果您不熟悉构建工具，则设置新项目可能会令人沮丧。 在短期内，我的建议是找到一个入门项目以助您一臂之力—如果您正考虑使用那些框架，那么上述Angular CLI和Create React App在这方面非常有用。 长期？ 花时间学习工具-tsc，Babel，WebPack和所有这些好东西。 如果您使用的是节点，请尝试ts-node。 如果您使用的是Mocha，请尝试ts-mocha。 有一些简单的捷径可以帮助您入门。"]
}, {
  "tag": "P",
  "text": "It kinda feels like my argument is a little one sided though — I’m not devoting so much effort to the drawbacks as to the advantages. I guess that’s for the same reason I wouldn’t devote much time to the advantages of eating McDonald’s for every meal — there are limited advantages to doing that (not having to cook ever again… I guess that’s it).",
  "translation": "有点像是我的观点是单方面的-我并没有在缺点和优点上投入太多精力 我想，出于同样的原因，我不会花很多时间在每顿饭上都吃麦当劳的好处-这样做的好处有限（不必再做饭了……我想就是这样）。"
}, {
  "tag": "H1",
  "text": "The Stats",
  "translation": "统计资料"
}, {
  "tag": "P",
  "text": "As always, StackOverflow provides the gauge for how right or wrong I am. At first glance, it looks like I’m way off the mark. According to StackOverflow’s 2019 Developer Survey, JavaScript is, for the seventh year in a row, the most talked about language on StackOverflow, with 67.8% of respondents using it. Typescript is languishing in 10th place on 21.2%."
}, {
  "tag": "P",
  "text": "In 2018, however, Typescript was at 17.4%, and only 9.5% the year before. In 2016, only 0.47% of respondents used Typescript. In that respect, Typescript has had a pretty phenomenal rise, largely thanks to the Angular framework, which abandoned JavaScript support early on."
}, {
  "tag": "P",
  "text": "When you look at the “Most Loved” languages, it’s even better for Typescript, which sits in 3rd place (73.1%) behind Rust and Python. JavaScript is on 11th (66.8%)."
}, {
  "tag": "H1",
  "text": "The Future",
  "translation": "未来"
}, {
  "tag": "P",
  "text": "I don’t think Typescript is going to replace JavaScript any time soon — understanding the latter is crucial to making the former work. And we’re not about to see Typescript running natively in any browser. It is a preprocessor, like CoffeeScript was before it. The difference between Typescript and Coffescript is that the latter was a fundamental change to the language it was built upon. Typescript is a natural evolution. Not only does this make it easier to learn, but it makes converting a JavaScript project to Typescript a much more incremental process. Start by renaming *.js to *.ts. Now you’ve got a Typescript project! You can then start adopting the language features one step at a time. I can’t promise that it will be easy, but it will tell you things about your code that JavaScript never could. The Typescript compiler will be waiting when you embark on your next project",
  "translation": "我认为Typescript不会在短期内取代JavaScript-了解后者对于使前者发挥作用至关重要。 而且我们不会看到Typescript在任何浏览器中本机运行。 它是一个预处理器，就像之前的CoffeeScript一样。 Typescript和Coffescript之间的区别在于后者是对其所基于语言的根本改变。 打字稿是自然的演变。 这不仅使学习变得更容易，而且使将JavaScript项目转换为Typescript的过程更加繁琐。 首先将* .js重命名为* .ts。 现在，您有了Typescript项目！ 然后，您可以一次开始采用语言功能。 我不能保证这会很容易，但是它将告诉您有关JavaScript从未有过的事情。 当您开始下一个项目时，Typescript编译器将等待"
}, {
  "tag": "P",
  "text": "And that’s why I’ll never go back.",
  "translation": "这就是为什么我永不回头。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Jamie Morris的文章《I’ll Never Go Back to JavaScript》，参考：https://levelup.gitconnected.com/ill-never-go-back-to-javascript-16370dc264a0)",
  "translation": "（本文翻译自Jamie Morris的文章，《我永远不会回到JavaScript》，参考：https：//levelup.gitconnected.com/ill-never-go-back-to-javascript-16370dc264a0）"
}]